import telebot
from telebot import types
from xml.etree import ElementTree
from bs4 import BeautifulSoup
import config
from selenium.common.exceptions import InvalidArgumentException
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager

op = webdriver.ChromeOptions()
op.add_argument('headless')
ChromeDriverManager(path="drivers").install()
driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=op)

try:
    tree = ElementTree.parse('users.xml')  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞
except FileNotFoundError:  # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    with open('users.xml', 'w'):
        root = ElementTree.Element('User_list')  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω—è
        tree = ElementTree.ElementTree(root)  # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
        tree.write('users.xml')
except ElementTree.ParseError:  # –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
    root = ElementTree.Element('User_list')  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω—è
    tree = ElementTree.ElementTree(root)  # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
    tree.write('users.xml')
user_list = tree.getroot()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–Ω—è


def name_stop(stop_link):
    try:
        driver.get(stop_link)
    except InvalidArgumentException:
        return None
    soup = BeautifulSoup(driver.page_source, 'lxml')
    try:
        n_stop = soup.find('h1', class_='card-title-view__title').text
    except AttributeError:
        return None
    return n_stop


bot = telebot.TeleBot(config.token)


@bot.message_handler(commands=['start'])
def start(message):
    global tree, user_list, root
    try:
        tree = ElementTree.parse('users.xml')  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞
    except FileNotFoundError:  # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        with open('users.xml', 'w'):
            root = ElementTree.Element('User_list')  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω—è
            tree = ElementTree.ElementTree(root)  # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
            tree.write('users.xml')
    except ElementTree.ParseError:  # –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
        root = ElementTree.Element('User_list')  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω—è
        tree = ElementTree.ElementTree(root)  # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
        tree.write('users.xml')
    user_list = tree.getroot()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–Ω—è
    s = 0
    for user in user_list:  # –ø–æ—à–∞–≥–æ–≤–æ –ø–æ —é–∑–µ—Ä–∞–º
        if user.attrib.get('id') == str(message.from_user.id):  # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
            s += 1
            if user.find('Stop') is not None:
                if user.find('Stop').get('name') is not None:  # –µ—Å—Ç—å –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    stops = ''
                    for i, stop in enumerate(user.findall('Stop')):
                        stops += str(i + 1) + ' - ' + ''.join(stop.get('name')) + '\n'
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    buttons = [
                        (types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè‚úÖ', callback_data='button_select')),
                        (types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—Éüöè‚ûï', callback_data='button_add'))]
                    keyboard.add(buttons[0], buttons[1])
                    bot.send_message(message.from_user.id, f'–í–∞—à–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:\n{stops}', reply_markup=keyboard)
            elif user.find('Stop') is None:
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                button = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—Éüöè‚ûï', callback_data='button_add')
                keyboard.add(button)
                bot.send_message(message.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫', reply_markup=keyboard)
    if s == 0:  # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç
        ElementTree.SubElement(user_list, 'User', id=str(message.from_user.id))
        tree.write('users.xml', encoding="UTF-8")
        start(message)


@bot.callback_query_handler(func=lambda func: True)
def callback_button(callback):
    global user_list
    if callback.data == 'button_add':
        bot.send_message(callback.from_user.id, '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É:')
    if callback.data == 'button_select':
        for user in user_list:
            if user.attrib.get('id') == str(callback.from_user.id):
                if len(user.findall('Stop')) != 0:
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    for i, stop in enumerate(user.findall('Stop')):
                        buttons = [(types.InlineKeyboardButton(text=str(i + 1) + ' - ' + ''.join(stop.get('name')),
                                                               callback_data=f'button_selected_{i}')),
                                   types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥üîô', callback_data='button_start')]
                        keyboard.add(buttons[0], buttons[1])
                    bot.send_message(callback.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É:', reply_markup=keyboard)
    if str(callback.data)[:16] == 'button_selected_':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = [(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥üîô', callback_data='button_select')),
                   (types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—Éüöè‚ûï',
                                               callback_data=f'button_delete_stop_{str(callback.data)[16:]}'))]
        keyboard.add(buttons[0], buttons[1])
        for user in user_list:
            if user.attrib.get('id') == str(callback.from_user.id):
                for i, stop in enumerate(user.findall('Stop')):
                    if str(i) == str(callback.data)[16:]:
                        bot.send_message(callback.from_user.id, str(stop.get('name')) + ':\n', reply_markup=keyboard)
    if str(callback.data)[:19] == 'button_delete_stop_':
        for user in user_list:
            if user.attrib.get('id') == str(callback.from_user.id):
                for i, stop in enumerate(user.findall('Stop')):
                    if str(i) == str(callback.data)[19:]:
                        user.remove(stop)
                        tree.write('users.xml', encoding="UTF-8")
                        start(callback)
    if callback.data == 'button_start':
        start(callback)


@bot.message_handler(func=lambda m: True)
def text_handler(message):
    global tree
    duplicate = False
    if str(message.text).find('http') != -1:
        bot.send_message(message.from_user.id, '–ñ–¥–∏—Ç–µ...')
        stop_name = name_stop(str(message.text)[str(message.text).find('http'):])
        if stop_name is None:
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞, —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            start(message)
        else:
            for user in user_list:
                if user.attrib.get('id') == str(message.from_user.id):
                    for i, stop in enumerate(user.findall('Stop')):
                        if stop.get('link') == str(message.text)[str(message.text).find('http'):]:
                            bot.send_message(message.from_user.id, '–¢–∞–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ –µ—Å—Ç—å')
                            duplicate = True
                    if not duplicate:
                        stop = ElementTree.SubElement(user, 'Stop')
                        stop.set('name', stop_name)
                        stop.set('link', str(message.text)[str(message.text).find('http'):])
                        tree.write('users.xml', encoding="UTF-8")
                        duplicate = False
            start(message)


bot.infinity_polling()
